{
  "address": "0xf60cD21e3235930511F43450B2E8AA1542fc2117",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "evidenceURI",
          "type": "string"
        }
      ],
      "name": "ClaimInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "ClaimRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "PremiumPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "name": "StakeDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "withInterest",
          "type": "bool"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TIMELOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "approveClaimByDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "enum Pool.ClaimStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "evidenceURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "contract DAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "payPremium",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "plans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coverageAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "rejectClaimByDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoAddress",
          "type": "address"
        }
      ],
      "name": "setDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "evidenceURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "aiConfidence",
          "type": "uint256"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAppealFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPremiums",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalPremiumPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xef7e0afc82bb992e3a8f7d694c0a2d0005b2ebcd2dfcd48a24511fdee3eb5d51",
  "receipt": {
    "to": null,
    "from": "0xf503662dA17ED5bB4904c6B789C539CBD8B19fD2",
    "contractAddress": "0xf60cD21e3235930511F43450B2E8AA1542fc2117",
    "transactionIndex": 1,
    "gasUsed": "2510528",
    "logsBloom": "0x
    "blockHash": "0x6f4f6f64a38e575c4c7908a6e535290deb68992b2fa6f3b3577682d60e60da0e",
    "transactionHash": "0xef7e0afc82bb992e3a8f7d694c0a2d0005b2ebcd2dfcd48a24511fdee3eb5d51",
    "logs": [],
    "blockNumber": 101836435,
    "cumulativeGasUsed": "2510528",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "62324e2e06ea56af45889c15096501f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"}],\"name\":\"ClaimInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"ClaimRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"PremiumPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"StakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withInterest\",\"type\":\"bool\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TIMELOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"approveClaimByDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Pool.ClaimStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract DAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"payPremium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"rejectClaimByDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"aiConfidence\",\"type\":\"uint256\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAppealFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPremiums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPremiumPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Pool.sol\\\";\\r\\n\\r\\ncontract DAO {\\r\\n    Pool public immutable pool;\\r\\n    \\r\\n    struct Proposal {\\r\\n        int256 totalVotes;\\r\\n        bool exists;\\r\\n        uint256 aiConfidence;\\r\\n        string evidenceURI;\\r\\n        uint256 yesVotes;\\r\\n        uint256 noVotes;\\r\\n        uint256 timestamp;\\r\\n        uint256 timelockEnd;\\r\\n        bool isAppealProposal;\\r\\n        mapping(address => bool) hasVoted;\\r\\n    }\\r\\n\\r\\n    uint256 public activeProposalCount;\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    \\r\\n    uint256 public constant VOTING_DURATION = 3 days;\\r\\n    uint256 public constant TIMELOCK_DURATION = 2 days;\\r\\n    uint256 public constant QUORUM_PERCENTAGE = 51;\\r\\n    uint256 public constant AI_APPROVAL_THRESHOLD = 60;\\r\\n    uint256 public appealFee = 0.1 ether;\\r\\n\\r\\n    event ProposalCreated(\\r\\n        uint256 indexed claimId,\\r\\n        string evidenceURI,\\r\\n        uint256 aiConfidence,\\r\\n        uint256 timestamp,\\r\\n        bool isAppeal\\r\\n    );\\r\\n    \\r\\n    event AppealSubmitted(\\r\\n        uint256 indexed claimId,\\r\\n        address indexed appellant,\\r\\n        uint256 appealFee\\r\\n    );\\r\\n\\r\\n    event VoteSubmitted(\\r\\n        uint256 indexed claimId,\\r\\n        address indexed voter,\\r\\n        bool vote,\\r\\n        uint256 votingPower\\r\\n    );\\r\\n    \\r\\n    event ProposalExecuted(\\r\\n        uint256 indexed claimId,\\r\\n        bool approved,\\r\\n        uint256 finalYesVotes,\\r\\n        uint256 finalNoVotes\\r\\n    );\\r\\n\\r\\n    constructor(address payable _poolAddress) {\\r\\n        pool = Pool(_poolAddress);\\r\\n    }\\r\\n\\r\\n    function createProposal(\\r\\n        uint256 claimId,\\r\\n        string memory evidenceURI,\\r\\n        uint256 aiConfidence\\r\\n    ) external {\\r\\n        require(msg.sender == address(pool), \\\"Only pool can create proposals\\\");\\r\\n        require(!proposals[claimId].exists, \\\"Proposal already exists\\\");\\r\\n        require(aiConfidence >= AI_APPROVAL_THRESHOLD, \\\"AI confidence too low\\\");\\r\\n\\r\\n        activeProposalCount++;\\r\\n\\r\\n        Proposal storage newProposal = proposals[claimId];\\r\\n        newProposal.exists = true;\\r\\n        newProposal.aiConfidence = aiConfidence;\\r\\n        newProposal.evidenceURI = evidenceURI;\\r\\n        newProposal.timestamp = block.timestamp;\\r\\n        newProposal.timelockEnd = block.timestamp + TIMELOCK_DURATION;\\r\\n        newProposal.isAppealProposal = false;\\r\\n\\r\\n        emit ProposalCreated(\\r\\n            claimId,\\r\\n            evidenceURI,\\r\\n            aiConfidence,\\r\\n            block.timestamp,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function submitAppeal(\\r\\n        uint256 claimId,\\r\\n        string memory evidenceURI,\\r\\n        uint256 aiConfidence\\r\\n    ) external payable {\\r\\n        require(!proposals[claimId].exists, \\\"Proposal already exists\\\");\\r\\n        require(aiConfidence < AI_APPROVAL_THRESHOLD, \\\"AI confidence too high\\\");\\r\\n        require(msg.value >= appealFee, \\\"Insufficient appeal fee\\\");\\r\\n\\r\\n        (bool success, ) = address(pool).call{value: msg.value}(\\\"\\\");\\r\\n        require(success, \\\"Fee transfer failed\\\");\\r\\n\\r\\n        activeProposalCount++;\\r\\n\\r\\n        Proposal storage newProposal = proposals[claimId];\\r\\n        newProposal.exists = true;\\r\\n        newProposal.aiConfidence = aiConfidence;\\r\\n        newProposal.evidenceURI = evidenceURI;\\r\\n        newProposal.timestamp = block.timestamp;\\r\\n        newProposal.timelockEnd = block.timestamp + TIMELOCK_DURATION;\\r\\n        newProposal.isAppealProposal = true;\\r\\n\\r\\n        emit AppealSubmitted(claimId, msg.sender, msg.value);\\r\\n        emit ProposalCreated(\\r\\n            claimId,\\r\\n            evidenceURI,\\r\\n            aiConfidence,\\r\\n            block.timestamp,\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function submitVote(uint256 claimId, bool vote) external {\\r\\n        Proposal storage proposal = proposals[claimId];\\r\\n        require(proposal.exists, \\\"Proposal does not exist\\\");\\r\\n        require(!proposal.hasVoted[msg.sender], \\\"Already voted\\\");\\r\\n        require(\\r\\n            block.timestamp <= proposal.timelockEnd,\\r\\n            \\\"Timelock period ended\\\"\\r\\n        );\\r\\n\\r\\n        uint256 votingPower = calculateVotingPower(msg.sender);\\r\\n        require(votingPower > 0, \\\"No voting power\\\");\\r\\n\\r\\n        if (vote) {\\r\\n            proposal.yesVotes += votingPower;\\r\\n            proposal.totalVotes += int256(votingPower);\\r\\n        } else {\\r\\n            proposal.noVotes += votingPower;\\r\\n            proposal.totalVotes -= int256(votingPower);\\r\\n        }\\r\\n\\r\\n        proposal.hasVoted[msg.sender] = true;\\r\\n\\r\\n        emit VoteSubmitted(claimId, msg.sender, vote, votingPower);\\r\\n    }\\r\\n\\r\\n    function executeProposal(uint256 claimId) public {\\r\\n        Proposal storage proposal = proposals[claimId];\\r\\n        require(proposal.exists, \\\"Proposal does not exist\\\");\\r\\n        require(block.timestamp >= proposal.timelockEnd, \\\"Timelock not ended\\\");\\r\\n\\r\\n        bool approved = proposal.totalVotes > 0 && \\r\\n            isQuorumReached(proposal.yesVotes + proposal.noVotes);\\r\\n\\r\\n        if (approved) {\\r\\n            pool.approveClaimByDAO(claimId);\\r\\n        } else {\\r\\n            pool.rejectClaimByDAO(claimId);\\r\\n        }\\r\\n\\r\\n        activeProposalCount--;\\r\\n        \\r\\n        emit ProposalExecuted(\\r\\n            claimId,\\r\\n            approved,\\r\\n            proposal.yesVotes,\\r\\n            proposal.noVotes\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calculateVotingPower(address user) public view returns (uint256) {\\r\\n        (uint256 premiumPaid, ) = pool.users(user);\\r\\n        (uint256 stakedAmount, , , ) = pool.stakers(user);\\r\\n        uint256 userContribution = premiumPaid + stakedAmount;\\r\\n        \\r\\n        uint256 totalPoolSize = pool.totalPremiums() + pool.totalStaked() + pool.totalAppealFees();\\r\\n        if (totalPoolSize == 0) return 0;\\r\\n        \\r\\n        return (userContribution * 100) / totalPoolSize;\\r\\n    }\\r\\n\\r\\n    function isQuorumReached(uint256 totalVotes) internal view returns (bool) {\\r\\n        uint256 totalPossibleVotes = pool.totalPremiums() + pool.totalStaked();\\r\\n        return totalVotes * 100 >= totalPossibleVotes * QUORUM_PERCENTAGE;\\r\\n    }\\r\\n\\r\\n    function setAppealFee(uint256 newFee) external {\\r\\n        require(msg.sender == address(pool), \\\"Only pool can set fee\\\");\\r\\n        appealFee = newFee;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x3987b456400235b8b8b19b3ec0d2388d96cd382331769e1c37ad59bb0e2104b0\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./DAO.sol\\\";\\r\\n\\r\\ncontract Pool {\\r\\n    DAO public dao;\\r\\n    uint256 public constant TIMELOCK_DURATION = 2 days;\\r\\n    uint256 public totalAppealFees;\\r\\n\\r\\n    struct Plan {\\r\\n        uint256 id;\\r\\n        string name;\\r\\n        uint256 premium;\\r\\n        uint256 coverageAmount;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 totalPremiumPaid;\\r\\n        uint256 coverage;\\r\\n    }\\r\\n\\r\\n    struct Staker {\\r\\n        uint256 balance;\\r\\n        uint256 stakingTime;\\r\\n        uint256 lockDuration;\\r\\n        uint256 unlockTime;\\r\\n    }\\r\\n\\r\\n    struct Claim {\\r\\n        address claimant;\\r\\n        uint256 amount;\\r\\n        uint256 unlockTime;\\r\\n        ClaimStatus status;\\r\\n        string evidenceURI;\\r\\n        bool exists;\\r\\n    }\\r\\n\\r\\n    enum ClaimStatus { Timelock, DAO_Voting, Claimed, Rejected }\\r\\n\\r\\n    mapping(address => User) public users;\\r\\n    mapping(address => Staker) public stakers;\\r\\n    mapping(uint256 => Claim) public claims;\\r\\n    uint256 public claimCounter;\\r\\n    uint256 public totalPremiums;\\r\\n    uint256 public totalStaked;\\r\\n    Plan[] public plans;\\r\\n\\r\\n    event PremiumPaid(address indexed user, uint256 amount, uint256 coverage);\\r\\n    event ClaimInitiated(uint256 claimId, address indexed claimant, uint256 amount, uint256 unlockTime, string evidenceURI);\\r\\n    event ClaimApproved(uint256 claimId, address indexed claimant, uint256 amount);\\r\\n    event ClaimRejected(uint256 claimId);\\r\\n    event StakeDeposited(address indexed user, uint256 amount, uint256 lockDuration);\\r\\n    event StakeWithdrawn(address indexed user, uint256 amount, bool withInterest);\\r\\n\\r\\n    constructor() {\\r\\n        _addPlan(\\\"Basic Shield\\\", 0.01 ether, 5 ether);\\r\\n        _addPlan(\\\"Premium Guard\\\", 0.02 ether, 10 ether);\\r\\n        _addPlan(\\\"Ultimate Protection\\\", 0.03 ether, 20 ether);\\r\\n    }\\r\\n\\r\\n    function setDAO(address _daoAddress) external {\\r\\n        require(address(dao) == address(0), \\\"DAO already set\\\");\\r\\n        dao = DAO(payable(_daoAddress));\\r\\n    }\\r\\n\\r\\n    function _addPlan(string memory name, uint256 premium, uint256 coverageAmount) internal {\\r\\n        plans.push(Plan({\\r\\n            id: plans.length,\\r\\n            name: name,\\r\\n            premium: premium,\\r\\n            coverageAmount: coverageAmount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    function payPremium(uint256 planId) external payable {\\r\\n        require(planId < plans.length, \\\"Invalid plan ID\\\");\\r\\n        Plan memory plan = plans[planId];\\r\\n        require(msg.value == plan.premium, \\\"Incorrect premium amount\\\");\\r\\n\\r\\n        users[msg.sender].totalPremiumPaid += msg.value;\\r\\n        users[msg.sender].coverage = plan.coverageAmount;\\r\\n        totalPremiums += msg.value;\\r\\n\\r\\n        emit PremiumPaid(msg.sender, msg.value, plan.coverageAmount);\\r\\n    }\\r\\n\\r\\n    function submitClaim(uint256 amount, string memory evidenceURI, uint256 aiConfidence) external {\\r\\n        require(users[msg.sender].coverage >= amount, \\\"Insufficient coverage\\\");\\r\\n        \\r\\n        claimCounter++;\\r\\n        claims[claimCounter] = Claim({\\r\\n            claimant: msg.sender,\\r\\n            amount: amount,\\r\\n            unlockTime: block.timestamp + TIMELOCK_DURATION,\\r\\n            status: ClaimStatus.Timelock,\\r\\n            evidenceURI: evidenceURI,\\r\\n            exists: true\\r\\n        });\\r\\n\\r\\n        if (aiConfidence >= dao.AI_APPROVAL_THRESHOLD()) {\\r\\n            dao.createProposal(claimCounter, evidenceURI, aiConfidence);\\r\\n        }\\r\\n\\r\\n        emit ClaimInitiated(claimCounter, msg.sender, amount, block.timestamp + TIMELOCK_DURATION, evidenceURI);\\r\\n    }\\r\\n\\r\\n    function approveClaimByDAO(uint256 claimId) external {\\r\\n        require(msg.sender == address(dao), \\\"Only DAO can approve\\\");\\r\\n        Claim storage claim = claims[claimId];\\r\\n        require(claim.exists, \\\"Claim does not exist\\\");\\r\\n        require(claim.status == ClaimStatus.Timelock, \\\"Invalid claim status\\\");\\r\\n\\r\\n        claim.status = ClaimStatus.Claimed;\\r\\n        require(totalPremiums >= claim.amount, \\\"Insufficient premiums\\\");\\r\\n        totalPremiums -= claim.amount;\\r\\n        \\r\\n        (bool success, ) = payable(claim.claimant).call{value: claim.amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n\\r\\n        emit ClaimApproved(claimId, claim.claimant, claim.amount);\\r\\n    }\\r\\n\\r\\n    function rejectClaimByDAO(uint256 claimId) external {\\r\\n        require(msg.sender == address(dao), \\\"Only DAO can reject\\\");\\r\\n        Claim storage claim = claims[claimId];\\r\\n        require(claim.exists, \\\"Claim does not exist\\\");\\r\\n        claim.status = ClaimStatus.Rejected;\\r\\n        emit ClaimRejected(claimId);\\r\\n    }\\r\\n\\r\\n    function stake(uint256 duration) external payable {\\r\\n        require(msg.value > 0, \\\"Must stake something\\\");\\r\\n        require(\\r\\n            duration == 30 days || \\r\\n            duration == 180 days || \\r\\n            duration == 365 days, \\r\\n            \\\"Invalid duration\\\"\\r\\n        );\\r\\n        \\r\\n        stakers[msg.sender].balance += msg.value;\\r\\n        stakers[msg.sender].stakingTime = block.timestamp;\\r\\n        stakers[msg.sender].lockDuration = duration;\\r\\n        stakers[msg.sender].unlockTime = block.timestamp + duration;\\r\\n        totalStaked += msg.value;\\r\\n\\r\\n        emit StakeDeposited(msg.sender, msg.value, duration);\\r\\n    }\\r\\n\\r\\n    function unstake() external {\\r\\n        Staker storage staker = stakers[msg.sender];\\r\\n        require(staker.balance > 0, \\\"No stake to withdraw\\\");\\r\\n        \\r\\n        uint256 amount = staker.balance;\\r\\n        uint256 stakingDuration = block.timestamp - staker.stakingTime;\\r\\n        bool withInterest = stakingDuration >= staker.lockDuration;\\r\\n        \\r\\n        uint256 totalAmount = amount;\\r\\n        if (withInterest) {\\r\\n            totalAmount += _calculateInterest(amount, staker.lockDuration);\\r\\n        }\\r\\n        \\r\\n        staker.balance = 0;\\r\\n        staker.stakingTime = 0;\\r\\n        staker.lockDuration = 0;\\r\\n        staker.unlockTime = 0;\\r\\n        totalStaked -= amount;\\r\\n\\r\\n        (bool success, ) = payable(msg.sender).call{value: totalAmount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n\\r\\n        emit StakeWithdrawn(msg.sender, totalAmount, withInterest);\\r\\n    }\\r\\n\\r\\n    function _calculateInterest(uint256 amount, uint256 duration) internal pure returns (uint256) {\\r\\n        if (duration == 30 days) return (amount * 3) / 1000;\\r\\n        if (duration == 180 days) return (amount * 20) / 1000;\\r\\n        if (duration == 365 days) return (amount * 50) / 1000;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        require(msg.sender == address(dao), \\\"Only DAO can send funds\\\");\\r\\n        totalAppealFees += msg.value;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xba0c444fa812c5fae9789b1f00caae1ef1a2bbdbe17f6fbab7abad5c6dc0294f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c8063817b1cd211610095578063a888c2cd11610064578063a888c2cd146103ad578063b1620616146103ef578063b39e25191461042f578063e73a914c14610458578063ec1b350e14610481576101b0565b8063817b1cd2146102e85780639168ae7214610313578063a694fc3a14610353578063a87430ba1461036f576101b0565b80634623c81e116100d15780634623c81e1461023e5780634efa8f1714610269578063522ce59d146102945780635bda1584146102bd576101b0565b80632def6620146101b55780633503eb54146101cc5780634162169f146101f75780634364b26e14610222576101b0565b366101b05760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90611f74565b60405180910390fd5b34600160008282546101a79190612344565b92505081905550005b600080fd5b3480156101c157600080fd5b506101ca6104aa565b005b3480156101d857600080fd5b506101e16106c9565b6040516101ee9190612134565b60405180910390f35b34801561020357600080fd5b5061020c6106cf565b6040516102199190611f59565b60405180910390f35b61023c60048036038101906102379190611a05565b6106f3565b005b34801561024a57600080fd5b5061025361099c565b6040516102609190612134565b60405180910390f35b34801561027557600080fd5b5061027e6109a3565b60405161028b9190612134565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b69190611a05565b6109a9565b005b3480156102c957600080fd5b506102d2610d6d565b6040516102df9190612134565b60405180910390f35b3480156102f457600080fd5b506102fd610d73565b60405161030a9190612134565b60405180910390f35b34801561031f57600080fd5b5061033a600480360381019061033591906119dc565b610d79565b60405161034a9493929190612277565b60405180910390f35b61036d60048036038101906103689190611a05565b610da9565b005b34801561037b57600080fd5b50610396600480360381019061039191906119dc565b610ff1565b6040516103a4929190612202565b60405180910390f35b3480156103b957600080fd5b506103d460048036038101906103cf9190611a05565b611015565b6040516103e696959493929190611ef1565b60405180910390f35b3480156103fb57600080fd5b5061041660048036038101906104119190611a05565b611113565b60405161042694939291906121b6565b60405180910390f35b34801561043b57600080fd5b5061045660048036038101906104519190611a05565b6111db565b005b34801561046457600080fd5b5061047f600480360381019061047a91906119dc565b61135f565b005b34801561048d57600080fd5b506104a860048036038101906104a39190611a57565b611431565b005b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052b90611f94565b60405180910390fd5b600081600001549050600082600101544261054f9190612425565b90506000836002015482101590506000839050811561058457610576848660020154611800565b816105819190612344565b90505b6000856000018190555060008560010181905550600085600201819055506000856003018190555083600760008282546105be9190612425565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516105eb90611edc565b60006040518083038185875af1925050503d8060008114610628576040519150601f19603f3d011682016040523d82523d6000602084013e61062d565b606091505b5050905080610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890611ff4565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd5f2084c75f17274c06aaf0305d40af0c68144bc40b485a1a6f52b08e05d672c83856040516106b992919061214f565b60405180910390a2505050505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600880549050811061073a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610731906120f4565b60405180910390fd5b600060088281548110610776577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060040201604051806080016040529081600082015481526020016001820180546107a99061252c565b80601f01602080910402602001604051908101604052809291908181526020018280546107d59061252c565b80156108225780601f106107f757610100808354040283529160200191610822565b820191906000526020600020905b81548152906001019060200180831161080557829003601f168201915b5050505050815260200160028201548152602001600382015481525050905080604001513414610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90612014565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546108d99190612344565b925050819055508060600151600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550346006600082825461093d9190612344565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f395bd21029ce552d1941c174d800a5599c4b1b28887cc9b9eea83c5409da93ef348360600151604051610990929190612202565b60405180910390a25050565b6202a30081565b60055481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2e90611fb4565b60405180910390fd5b60006004600083815260200190815260200160002090508060050160009054906101000a900460ff16610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9690612114565b60405180910390fd5b60006003811115610ad9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160030160009054906101000a900460ff166003811115610b23577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a906120b4565b60405180910390fd5b60028160030160006101000a81548160ff02191690836003811115610bb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555080600101546006541015610bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf690612034565b60405180910390fd5b806001015460066000828254610c159190612425565b9250508190555060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010154604051610c6a90611edc565b60006040518083038185875af1925050503d8060008114610ca7576040519150601f19603f3d011682016040523d82523d6000602084013e610cac565b606091505b5050905080610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce790611ff4565b60405180910390fd5b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f0b582d60859bb6c5e17bb049bc83044c0c8dab7d0a026b4e3a4a2966d8926de5848460010154604051610d60929190612202565b60405180910390a2505050565b60065481565b60075481565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60003411610dec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de390612094565b60405180910390fd5b62278d00811480610dff575062ed4e0081145b80610e0d57506301e1338081145b610e4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4390611fd4565b60405180910390fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610e9e9190612344565b9250508190555042600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055508042610f3f9190612344565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055503460076000828254610f979190612344565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f05cce4a371bf9816b1a7594f1d76c98eba4ed025ff3e471234ae598f17899bd43483604051610fe6929190612202565b60405180910390a250565b60026020528060005260406000206000915090508060000154908060010154905082565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff169080600401805461107d9061252c565b80601f01602080910402602001604051908101604052809291908181526020018280546110a99061252c565b80156110f65780601f106110cb576101008083540402835291602001916110f6565b820191906000526020600020905b8154815290600101906020018083116110d957829003601f168201915b5050505050908060050160009054906101000a900460ff16905086565b6008818154811061112357600080fd5b906000526020600020906004020160009150905080600001549080600101805461114c9061252c565b80601f01602080910402602001604051908101604052809291908181526020018280546111789061252c565b80156111c55780601f1061119a576101008083540402835291602001916111c5565b820191906000526020600020905b8154815290600101906020018083116111a857829003601f168201915b5050505050908060020154908060030154905084565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126090612054565b60405180910390fd5b60006004600083815260200190815260200160002090508060050160009054906101000a900460ff166112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c890612114565b60405180910390fd5b60038160030160006101000a81548160ff0219169083600381111561131f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507f2aa44a1bb19392ef6a2fd220d2b1649a6dc1bebbfa2a6f2c496e2d39a3339d0e826040516113539190612134565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e5906120d4565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad90612074565b60405180910390fd5b600560008154809291906114c99061255e565b91905055506040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016202a3004261150a9190612344565b815260200160006003811115611549577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020018381526020016001151581525060046000600554815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083600381111561161c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550608082015181600401908051906020019061163d929190611892565b5060a08201518160050160006101000a81548160ff02191690831515021790555090505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356558d626040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c757600080fd5b505afa1580156116db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ff9190611a2e565b81106117975760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a891bfa960055484846040518463ffffffff1660e01b815260040161176493929190612178565b600060405180830381600087803b15801561177e57600080fd5b505af1158015611792573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167ff5b25d1983d605e095ff99bc660d3df9c003972cbc3edb40dd7a05cce2846161600554856202a300426117e29190612344565b866040516117f3949392919061222b565b60405180910390a2505050565b600062278d0082141561182e576103e860038461181d91906123cb565b611827919061239a565b905061188c565b62ed4e0082141561185a576103e860148461184991906123cb565b611853919061239a565b905061188c565b6301e13380821415611887576103e860328461187691906123cb565b611880919061239a565b905061188c565b600090505b92915050565b82805461189e9061252c565b90600052602060002090601f0160209004810192826118c05760008555611907565b82601f106118d957805160ff1916838001178555611907565b82800160010185558215611907579182015b828111156119065782518255916020019190600101906118eb565b5b5090506119149190611918565b5090565b5b80821115611931576000816000905550600101611919565b5090565b6000611948611943846122ed565b6122bc565b90508281526020810184848401111561196057600080fd5b61196b8482856124ea565b509392505050565b600081359050611982816126b7565b92915050565b600082601f83011261199957600080fd5b81356119a9848260208601611935565b91505092915050565b6000813590506119c1816126ce565b92915050565b6000815190506119d6816126ce565b92915050565b6000602082840312156119ee57600080fd5b60006119fc84828501611973565b91505092915050565b600060208284031215611a1757600080fd5b6000611a25848285016119b2565b91505092915050565b600060208284031215611a4057600080fd5b6000611a4e848285016119c7565b91505092915050565b600080600060608486031215611a6c57600080fd5b6000611a7a868287016119b2565b935050602084013567ffffffffffffffff811115611a9757600080fd5b611aa386828701611988565b9250506040611ab4868287016119b2565b9150509250925092565b611ac781612459565b82525050565b611ad68161246b565b82525050565b611ae5816124b4565b82525050565b611af4816124d8565b82525050565b6000611b058261231d565b611b0f8185612333565b9350611b1f8185602086016124f9565b611b2881612692565b840191505092915050565b6000611b40601783612333565b91507f4f6e6c792044414f2063616e2073656e642066756e64730000000000000000006000830152602082019050919050565b6000611b80601483612333565b91507f4e6f207374616b6520746f2077697468647261770000000000000000000000006000830152602082019050919050565b6000611bc0601483612333565b91507f4f6e6c792044414f2063616e20617070726f76650000000000000000000000006000830152602082019050919050565b6000611c00601083612333565b91507f496e76616c6964206475726174696f6e000000000000000000000000000000006000830152602082019050919050565b6000611c40600f83612333565b91507f5472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b6000611c80601883612333565b91507f496e636f7272656374207072656d69756d20616d6f756e7400000000000000006000830152602082019050919050565b6000611cc0601583612333565b91507f496e73756666696369656e74207072656d69756d7300000000000000000000006000830152602082019050919050565b6000611d00601383612333565b91507f4f6e6c792044414f2063616e2072656a656374000000000000000000000000006000830152602082019050919050565b6000611d40601583612333565b91507f496e73756666696369656e7420636f76657261676500000000000000000000006000830152602082019050919050565b6000611d80601483612333565b91507f4d757374207374616b6520736f6d657468696e670000000000000000000000006000830152602082019050919050565b6000611dc0601483612333565b91507f496e76616c696420636c61696d207374617475730000000000000000000000006000830152602082019050919050565b6000611e00600f83612333565b91507f44414f20616c72656164792073657400000000000000000000000000000000006000830152602082019050919050565b6000611e40600083612328565b9150600082019050919050565b6000611e5a600f83612333565b91507f496e76616c696420706c616e20494400000000000000000000000000000000006000830152602082019050919050565b6000611e9a601483612333565b91507f436c61696d20646f6573206e6f742065786973740000000000000000000000006000830152602082019050919050565b611ed6816124aa565b82525050565b6000611ee782611e33565b9150819050919050565b600060c082019050611f066000830189611abe565b611f136020830188611ecd565b611f206040830187611ecd565b611f2d6060830186611aeb565b8181036080830152611f3f8185611afa565b9050611f4e60a0830184611acd565b979650505050505050565b6000602082019050611f6e6000830184611adc565b92915050565b60006020820190508181036000830152611f8d81611b33565b9050919050565b60006020820190508181036000830152611fad81611b73565b9050919050565b60006020820190508181036000830152611fcd81611bb3565b9050919050565b60006020820190508181036000830152611fed81611bf3565b9050919050565b6000602082019050818103600083015261200d81611c33565b9050919050565b6000602082019050818103600083015261202d81611c73565b9050919050565b6000602082019050818103600083015261204d81611cb3565b9050919050565b6000602082019050818103600083015261206d81611cf3565b9050919050565b6000602082019050818103600083015261208d81611d33565b9050919050565b600060208201905081810360008301526120ad81611d73565b9050919050565b600060208201905081810360008301526120cd81611db3565b9050919050565b600060208201905081810360008301526120ed81611df3565b9050919050565b6000602082019050818103600083015261210d81611e4d565b9050919050565b6000602082019050818103600083015261212d81611e8d565b9050919050565b60006020820190506121496000830184611ecd565b92915050565b60006040820190506121646000830185611ecd565b6121716020830184611acd565b9392505050565b600060608201905061218d6000830186611ecd565b818103602083015261219f8185611afa565b90506121ae6040830184611ecd565b949350505050565b60006080820190506121cb6000830187611ecd565b81810360208301526121dd8186611afa565b90506121ec6040830185611ecd565b6121f96060830184611ecd565b95945050505050565b60006040820190506122176000830185611ecd565b6122246020830184611ecd565b9392505050565b60006080820190506122406000830187611ecd565b61224d6020830186611ecd565b61225a6040830185611ecd565b818103606083015261226c8184611afa565b905095945050505050565b600060808201905061228c6000830187611ecd565b6122996020830186611ecd565b6122a66040830185611ecd565b6122b36060830184611ecd565b95945050505050565b6000604051905081810181811067ffffffffffffffff821117156122e3576122e2612663565b5b8060405250919050565b600067ffffffffffffffff82111561230857612307612663565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061234f826124aa565b915061235a836124aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561238f5761238e6125a7565b5b828201905092915050565b60006123a5826124aa565b91506123b0836124aa565b9250826123c0576123bf6125d6565b5b828204905092915050565b60006123d6826124aa565b91506123e1836124aa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561241a576124196125a7565b5b828202905092915050565b6000612430826124aa565b915061243b836124aa565b92508282101561244e5761244d6125a7565b5b828203905092915050565b60006124648261248a565b9050919050565b60008115159050919050565b6000819050612485826126a3565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006124bf826124c6565b9050919050565b60006124d18261248a565b9050919050565b60006124e382612477565b9050919050565b82818337600083830152505050565b60005b838110156125175780820151818401526020810190506124fc565b83811115612526576000848401525b50505050565b6000600282049050600182168061254457607f821691505b6020821081141561255857612557612634565b5b50919050565b6000612569826124aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561259c5761259b6125a7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b600481106126b4576126b3612605565b5b50565b6126c081612459565b81146126cb57600080fd5b50565b6126d7816124aa565b81146126e257600080fd5b5056fea2646970667358221220ac07ab170859aecc95729c3bd2597976dc09ad749011f8cfaf67c07b8457dc3b64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 606,
        "contract": "contracts/Pool.sol:Pool",
        "label": "dao",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DAO)600"
      },
      {
        "astId": 611,
        "contract": "contracts/Pool.sol:Pool",
        "label": "totalAppealFees",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 658,
        "contract": "contracts/Pool.sol:Pool",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)625_storage)"
      },
      {
        "astId": 663,
        "contract": "contracts/Pool.sol:Pool",
        "label": "stakers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Staker)634_storage)"
      },
      {
        "astId": 668,
        "contract": "contracts/Pool.sol:Pool",
        "label": "claims",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Claim)648_storage)"
      },
      {
        "astId": 670,
        "contract": "contracts/Pool.sol:Pool",
        "label": "claimCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 672,
        "contract": "contracts/Pool.sol:Pool",
        "label": "totalPremiums",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 674,
        "contract": "contracts/Pool.sol:Pool",
        "label": "totalStaked",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 678,
        "contract": "contracts/Pool.sol:Pool",
        "label": "plans",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Plan)620_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Plan)620_storage)dyn_storage": {
        "base": "t_struct(Plan)620_storage",
        "encoding": "dynamic_array",
        "label": "struct Pool.Plan[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DAO)600": {
        "encoding": "inplace",
        "label": "contract DAO",
        "numberOfBytes": "20"
      },
      "t_enum(ClaimStatus)653": {
        "encoding": "inplace",
        "label": "enum Pool.ClaimStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Staker)634_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Pool.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)634_storage"
      },
      "t_mapping(t_address,t_struct(User)625_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Pool.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)625_storage"
      },
      "t_mapping(t_uint256,t_struct(Claim)648_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Pool.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)648_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Claim)648_storage": {
        "encoding": "inplace",
        "label": "struct Pool.Claim",
        "members": [
          {
            "astId": 636,
            "contract": "contracts/Pool.sol:Pool",
            "label": "claimant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 638,
            "contract": "contracts/Pool.sol:Pool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 640,
            "contract": "contracts/Pool.sol:Pool",
            "label": "unlockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 643,
            "contract": "contracts/Pool.sol:Pool",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(ClaimStatus)653"
          },
          {
            "astId": 645,
            "contract": "contracts/Pool.sol:Pool",
            "label": "evidenceURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 647,
            "contract": "contracts/Pool.sol:Pool",
            "label": "exists",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Plan)620_storage": {
        "encoding": "inplace",
        "label": "struct Pool.Plan",
        "members": [
          {
            "astId": 613,
            "contract": "contracts/Pool.sol:Pool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 615,
            "contract": "contracts/Pool.sol:Pool",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 617,
            "contract": "contracts/Pool.sol:Pool",
            "label": "premium",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 619,
            "contract": "contracts/Pool.sol:Pool",
            "label": "coverageAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Staker)634_storage": {
        "encoding": "inplace",
        "label": "struct Pool.Staker",
        "members": [
          {
            "astId": 627,
            "contract": "contracts/Pool.sol:Pool",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 629,
            "contract": "contracts/Pool.sol:Pool",
            "label": "stakingTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 631,
            "contract": "contracts/Pool.sol:Pool",
            "label": "lockDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 633,
            "contract": "contracts/Pool.sol:Pool",
            "label": "unlockTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(User)625_storage": {
        "encoding": "inplace",
        "label": "struct Pool.User",
        "members": [
          {
            "astId": 622,
            "contract": "contracts/Pool.sol:Pool",
            "label": "totalPremiumPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 624,
            "contract": "contracts/Pool.sol:Pool",
            "label": "coverage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}